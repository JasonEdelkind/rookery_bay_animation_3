names<-unique(RBNERR_p$Snake_Name)
#filtering removal to only include RBNERR scouts
removal_old<-removal %>% filter(removal$Sentinel %in% names)
#removing removal points north of tamiami
removal<-removal %>% filter(removal$Designation!="Six L's Agricultural Buffer")
removal<-removal %>% filter(removal$ID!="BP01-20DEC22")
removal<-removal %>% filter(removal$ID!="BP03-14FEB23")
#filtering removal to only include RBNERR scouts
removal_old<-removal %>% filter(removal$Sentinel %in% names)
unique(removal_old$Sentinel)
base+
geom_sf(data = kml_boundary, aes(fill = ENTITY),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = PSSF_p, aes(fill=id), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=removal_old, aes(x=Long,y=Lat))
View(kml_boundary)
base+
geom_sf(data = kml_boundary, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = PSSF_p, aes(fill=id), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=removal_old, aes(x=Long,y=Lat))
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
#remove rogue 1, rogue 2, and caesar
df<-df %>% filter(df$Status !="rogue)
df<-read.csv("./data/telem.total.csv")
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
unique(df$Snake_Name)
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
#format date column
df$Date<-as.Date(df$Date, format = "%Y-%m-%d")
#adding leading zeroes to time column
df$Time<-as.integer(df$Time)
df<-df %>%
mutate(Time=sprintf("%04d", df$Time))
## read in and plot picayune boundary
kml_boundary_rough <- st_read("./shapefiles/removal_boundaryKML.kml")
#merge geometries into a single layer
kml_boundary_rough <- kml_boundary_rough %>%
group_by(Name) %>%
summarize(geometry = st_union(geometry))
#change crs
kml_boundary_rough<-st_transform(kml_boundary_rough, crs = 4269)
#offsetting RBNERR boundary to align with new base map
kml_boundary_rough$geometry <-  kml_boundary_rough |> st_geometry() + c(.00185, -.0018)
#redefine crs
st_crs(kml_boundary_rough) = "EPSG:4269"
#create df of coord data
xy <-data.frame(df$UTM_E,df$UTM_N)
#creating a copy of df to turn into an spdf dataframe
spdf<-df
#converting point data to spatial points dataframe
coordinates(spdf) <- ~Long+Lat
proj4string(spdf) <- CRS("+proj=longlat +datum=NAD83")
spdf <- st_as_sf(spdf,coords = 24:25)
spdf <- spdf %>%
st_transform(crs = 4269)
#select only points that occur within the RBNERR boundary
RBNERR_p<-spdf[which(st_intersects(kml_boundary_rough, spdf, sparse = FALSE)), ]
View(RBNERR_p)
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
#set API
ggmap::register_google(key = "AIzaSyBeZDy6_OZBaN3ewQZxDmKgh8Xcq519IKQ")
#create basemap
base<-get_map(c(left=min(df$Long-0.1),bottom=min(df$Lat),right=max(df$Long),top=max(df$Lat)), source="google",maptype="satellite",zoom=11)
#convert to gg object
base<-ggmap(base)
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
names<-unique(RBNERR_p$Snake_Name)
df.RBNERR<-df %>% filter(df$Snake_Name %in% names)
View(df.RBNERR)
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
names
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Severus")
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Marshall")
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Joker")
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
#geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
View(RBNERR_p)
summ<-RBNERR_p %>% group_by(Snake_Name) %>% summarise(n=n())
View(summ)
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
View(summ)
summ<-RBNERR_p %>% group_by(Snake_Name) %>% summarise(n=n())
#telemetry.mcp<-telemetry.mcp %>% group_by(id_season) %>% mutate (n=n()) %>% filter(n>=3) #Maybe Not Necessary????
#isolate relevant rows
telemetry.mcp<-as.data.frame(RBNERR_p)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID","id_season", "Long", "Lat","Date","Time")]
View(telemetry.mcp)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID", "Longitude", "Latitude","Date","Time")]
# Define long/lat columns
coordinates(telemetry.mcp) <- c("Long", "Lat")
# Define long/lat columns
coordinates(telemetry.mcp) <- c("Longitude", "Latitude")
#telemetry.mcp<-telemetry.mcp %>% group_by(id_season) %>% mutate (n=n()) %>% filter(n>=3) #Maybe Not Necessary????
#isolate relevant rows
telemetry.mcp<-as.data.frame(RBNERR_p)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID", "UTM_E", "UTM_N","Date","Time")]
#telemetry.mcp<-telemetry.mcp %>% group_by(id_season) %>% mutate (n=n()) %>% filter(n>=3) #Maybe Not Necessary????
#isolate relevant rows
telemetry.mcp<-as.data.frame(RBNERR_p)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID", "UTM_E", "UTM_N","Date","Time")]
# Define long/lat columns
coordinates(telemetry.mcp) <- c("UTM_E", "UTM_N")
# Set the coordinate reference system (CRS)
proj4string(telemetry.mcp) <- CRS("+init=epsg:4269")
#telemetry.mcp<-telemetry.mcp %>% group_by(id_season) %>% mutate (n=n()) %>% filter(n>=3) #Maybe Not Necessary????
#isolate relevant rows
telemetry.mcp<-as.data.frame(RBNERR_p)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID", "UTM_E", "UTM_N","Date","Time")]
# Define long/lat columns
coordinates(telemetry.mcp) <- c("UTM_E", "UTM_N")
# Set the coordinate reference system (CRS)
proj4string(telemetry.mcp) <- CRS("+init=epsg:26917")
# Project data to utms
telemetry.mcp <- spTransform(telemetry.mcp,
CRS("+proj=utm +zone=17 +datum=NAD83 +units=m +no_defs"))
View(telemetry.mcp)
#convert to df
telemetry.mcp<-data.frame(telemetry.mcp)
telemetry.mcp<-ungroup(telemetry.mcp)
View(telemetry.mcp)
telemetry.mcp$Snake_ID<-"01"
track <- telemetry.mcp %>%
# Add formatted date-time
# This stage can be tricky, so double-check those date values in your own data.
mutate(ts = as.POSIXct(paste(Date, Time, sep = " "))) %>%
# Make track with coordinates, date-time, id
make_track(coords.x1, coords.x2, ts, id = id_season,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917") %>%
# Use nest() to allow us to deal with multiple animals (5 in sample set)
# Each animal's track is stored in a tibble (table) nested within the data column
nest(data = -"id") %>%
arrange(id)
# Make an amt `track` object with our sample data set
library(adehabitatHR)
library(amt)
track <- telemetry.mcp %>%
# Add formatted date-time
# This stage can be tricky, so double-check those date values in your own data.
mutate(ts = as.POSIXct(paste(Date, Time, sep = " "))) %>%
# Make track with coordinates, date-time, id
make_track(coords.x1, coords.x2, ts, id = id_season,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917") %>%
# Use nest() to allow us to deal with multiple animals (5 in sample set)
# Each animal's track is stored in a tibble (table) nested within the data column
nest(data = -"id") %>%
arrange(id)
track <- telemetry.mcp %>%
# Add formatted date-time
# This stage can be tricky, so double-check those date values in your own data.
mutate(ts = as.POSIXct(paste(Date, Time, sep = " "))) %>%
# Make track with coordinates, date-time, id
make_track(coords.x1, coords.x2, ts, id = Snake_ID,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917") %>%
# Use nest() to allow us to deal with multiple animals (5 in sample set)
# Each animal's track is stored in a tibble (table) nested within the data column
nest(data = -"id") %>%
arrange(id)
track <- track %>%
mutate(mcp = map(data, function(x)
x %>% hr_mcp(levels = c(1.0))))
track$area<-NA
for(i in 1:nrow(track)){
area<-hr_area(track$mcp[[i]])
track$area[i]<-area[[3]]
}
track$area<-track$area* 0.0000003861 #convert to sq mi
View(track)
track$mcp
plot(track$mcp)
track$mcp[1]
track$mcp[[1]
]
mcp<-track$mcp
track_data<-make_track(data=telemetry.mcp, coords.x1, coords.x2, ts, id = Snake_ID,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917")
View(telemetry.mcp)
track_data<-make_track(data=telemetry.mcp, telemetry.mcp$coords.x1, telemetry.mcp$coords.x2, ts, id = Snake_ID,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917")
telemetry.mcp %>%
mutate(ts = as.POSIXct(paste(Date, Time, sep = " ")))
telemetry.mcp<-telemetry.mcp %>%
mutate(ts = as.POSIXct(paste(Date, Time, sep = " ")))
track_data<-make_track(data=telemetry.mcp, telemetry.mcp$coords.x1, telemetry.mcp$coords.x2, telemetry.mcp$ts, id = Snake_ID,
# Make sure to specify coordinate reference system (CRS)
crs = "+init=epsg:26917")
?make_track
track_data<-make_track(telemetry.mcp, coords.x1, coords.x2, ts,
crs = "+init=epsg:26917")
hr_mcp_result <- hr_mcp(track_data, level = 1)
ggplot() +
geom_sf(data = hr_mcp_result, fill = "lightblue", color = "black") +
# Add your data points if needed
geom_sf(data = track_data, aes(geometry = geometry), color = "red") +
labs(title = "MCP Home Range") +
theme_minimal()
View(hr_mcp_result)
area(hr_mcp_result)
area(hr_mcp_result$mcp)
area(hr_mcp_result$data)
View(hr_mcp_result)
hr_mcp_result[[1]][[3]]
hr_area<-hr_mcp_result[[1]][[3]]* 0.0000003861 #convert to sq mi
hr_area
ggplot() +
geom_sf(data = hr_mcp_result, fill = "lightblue", color = "black")# +
View(hr_mcp_result)
sf_object <- st_as_sf(hr_mcp_result, coords = c("x_", "y_"))
sf_object <- st_as_sf(hr_mcp_result$mcp, coords = c("x_", "y_"))
ggplot() +
geom_sf(data = sf_object, fill = "lightblue", color = "black")# +
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",inherit.aes=FALSE,show.legend = FALSE)# +
crs(sf_object)
sf_object<-sf_object %>% st_transform(crs = 4269)
crs(sf_object)
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",inherit.aes=FALSE,show.legend = FALSE)# +
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE)# +
base +
#geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE)# +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE)# +
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE) +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
hr_mcp_result <- hr_mcp(track_data, level = .95)
hr_area<-hr_mcp_result[[1]][[3]]* 0.0000003861 #convert to sq mi
hr_area
sf_object <- st_as_sf(hr_mcp_result$mcp, coords = c("x_", "y_"))
crs(sf_object)
sf_object<-sf_object %>% st_transform(crs = 4269)
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE) +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
hr_mcp_result <- hr_mcp(track_data, level = 1)
hr_mcp_result <- hr_mcp(track_data, level = 1)
hr_area<-hr_mcp_result[[1]][[3]]* 0.0000003861 #convert to sq mi
hr_area
sf_object <- st_as_sf(hr_mcp_result$mcp, coords = c("x_", "y_"))
crs(sf_object)
sf_object<-sf_object %>% st_transform(crs = 4269)
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE) +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
ggsave(filename="total.mcp.png",width = 180, height = 180, dpi=300, units = "mm",path= "./images")
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
library(dplyr)
library(dplyr)
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
# #change unknown times to 1200
# df$Time<-ifelse(is.na(df$Time),1200,df$Time)
#format date column
df$Date<-as.Date(df$Date, format = "%Y-%m-%d")
#adding leading zeroes to time column
df$Time<-as.integer(df$Time)
df<-df %>%
mutate(Time=sprintf("%04d", df$Time))
## read in and plot picayune boundary
kml_boundary_rough <- st_read("./shapefiles/removal_boundaryKML.kml")
library(sf)
library(dplyr)
library(sf)
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
# #change unknown times to 1200
# df$Time<-ifelse(is.na(df$Time),1200,df$Time)
#format date column
df$Date<-as.Date(df$Date, format = "%Y-%m-%d")
#adding leading zeroes to time column
df$Time<-as.integer(df$Time)
df<-df %>%
mutate(Time=sprintf("%04d", df$Time))
## read in and plot picayune boundary
kml_boundary_rough <- st_read("./shapefiles/removal_boundaryKML.kml")
#kml_boundary <- sf::read_sf(".\\shapefiles\\Parks_Boundary.shp")
#merge geometries into a single layer
kml_boundary_rough <- kml_boundary_rough %>%
group_by(Name) %>%
summarize(geometry = st_union(geometry))
#change crs
kml_boundary_rough<-st_transform(kml_boundary_rough, crs = 4269)
#offsetting RBNERR boundary to align with new base map
kml_boundary_rough$geometry <-  kml_boundary_rough |> st_geometry() + c(.00185, -.0018)
#redefine crs
st_crs(kml_boundary_rough) = "EPSG:4269"
#create df of coord data
xy <-data.frame(df$UTM_E,df$UTM_N)
#creating a copy of df to turn into an spdf dataframe
spdf<-df
#converting point data to spatial points dataframe
coordinates(spdf) <- ~Long+Lat
library(geodata)
library(tidyverse)
library(rnaturalearth)
library(gganimate)
library(raster)
library(ggmap)
library(ggplot2)
library(sf)
library(dplyr)
df<-read.csv("./data/telem.total.csv")
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
# #change unknown times to 1200
# df$Time<-ifelse(is.na(df$Time),1200,df$Time)
#format date column
df$Date<-as.Date(df$Date, format = "%Y-%m-%d")
#adding leading zeroes to time column
df$Time<-as.integer(df$Time)
df<-df %>%
mutate(Time=sprintf("%04d", df$Time))
## read in and plot picayune boundary
kml_boundary_rough <- st_read("./shapefiles/removal_boundaryKML.kml")
#kml_boundary <- sf::read_sf(".\\shapefiles\\Parks_Boundary.shp")
#merge geometries into a single layer
kml_boundary_rough <- kml_boundary_rough %>%
group_by(Name) %>%
summarize(geometry = st_union(geometry))
#change crs
kml_boundary_rough<-st_transform(kml_boundary_rough, crs = 4269)
#offsetting RBNERR boundary to align with new base map
kml_boundary_rough$geometry <-  kml_boundary_rough |> st_geometry() + c(.00185, -.0018)
#redefine crs
st_crs(kml_boundary_rough) = "EPSG:4269"
#create df of coord data
xy <-data.frame(df$UTM_E,df$UTM_N)
#creating a copy of df to turn into an spdf dataframe
spdf<-df
#converting point data to spatial points dataframe
coordinates(spdf) <- ~Long+Lat
proj4string(spdf) <- CRS("+proj=longlat +datum=NAD83")
spdf <- st_as_sf(spdf,coords = 24:25)
spdf <- spdf %>%
st_transform(crs = 4269)
#select only points that occur within the RBNERR boundary
RBNERR_p<-spdf[which(st_intersects(kml_boundary_rough, spdf, sparse = FALSE)), ]
names<-unique(RBNERR_p$Snake_Name)
df.RBNERR<-df %>% filter(df$Snake_Name %in% names)
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Severus")
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Marshall")
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Joker")
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
#set API
ggmap::register_google(key = "AIzaSyBeZDy6_OZBaN3ewQZxDmKgh8Xcq519IKQ")
#create basemap
base<-get_map(c(left=min(df$Long-0.1),bottom=min(df$Lat),right=max(df$Long),top=max(df$Lat)), source="google",maptype="satellite",zoom=11)
#convert to gg object
base<-ggmap(base)
base
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE) +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
df<-read.csv("./data/telem.total.csv")
#set API
ggmap::register_google(key = "AIzaSyBeZDy6_OZBaN3ewQZxDmKgh8Xcq519IKQ")
#create basemap
base<-get_map(c(left=min(df$Long-0.1),bottom=min(df$Lat),right=max(df$Long),top=max(df$Lat)), source="google",maptype="satellite",zoom=11)
#convert to gg object
base<-ggmap(base)
base
#filter to remove rogue snakes
df<-df %>% filter(df$Status !="rogue")
#remove snake 118 (only one location)
df<-df %>% filter(df$Snake_ID!="PYBI_118")
#fixing Jesse's coordinate
df$UTM_N<-ifelse(df$UTM_N == 1, 2881527, df$UTM_N)
# #change unknown times to 1200
# df$Time<-ifelse(is.na(df$Time),1200,df$Time)
#format date column
df$Date<-as.Date(df$Date, format = "%Y-%m-%d")
#adding leading zeroes to time column
df$Time<-as.integer(df$Time)
df<-df %>%
mutate(Time=sprintf("%04d", df$Time))
## read in and plot picayune boundary
kml_boundary_rough <- st_read("./shapefiles/removal_boundaryKML.kml")
#kml_boundary <- sf::read_sf(".\\shapefiles\\Parks_Boundary.shp")
#merge geometries into a single layer
kml_boundary_rough <- kml_boundary_rough %>%
group_by(Name) %>%
summarize(geometry = st_union(geometry))
#change crs
kml_boundary_rough<-st_transform(kml_boundary_rough, crs = 4269)
#offsetting RBNERR boundary to align with new base map
kml_boundary_rough$geometry <-  kml_boundary_rough |> st_geometry() + c(.00185, -.0018)
#redefine crs
st_crs(kml_boundary_rough) = "EPSG:4269"
#create df of coord data
xy <-data.frame(df$UTM_E,df$UTM_N)
#creating a copy of df to turn into an spdf dataframe
spdf<-df
#converting point data to spatial points dataframe
coordinates(spdf) <- ~Long+Lat
proj4string(spdf) <- CRS("+proj=longlat +datum=NAD83")
spdf <- st_as_sf(spdf,coords = 24:25)
spdf <- spdf %>%
st_transform(crs = 4269)
#select only points that occur within the RBNERR boundary
RBNERR_p<-spdf[which(st_intersects(kml_boundary_rough, spdf, sparse = FALSE)), ]
names<-unique(RBNERR_p$Snake_Name)
df.RBNERR<-df %>% filter(df$Snake_Name %in% names)
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Severus")
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Marshall")
df.RBNERR<-df.RBNERR %>% filter(Snake_Name!="Joker")
#plot data
base+
geom_sf(data = kml_boundary_rough, aes(fill = Name),inherit.aes=FALSE,show.legend = FALSE)+
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
#geom_point(data=df.RBNERR, aes(x=Long,y=Lat))
#calculating the number of scout snakes within the rookery bay area and the MCP range coverage
summ<-RBNERR_p %>% group_by(Snake_Name) %>% summarise(n=n())
# Make an amt `track` object with our sample data set
library(adehabitatHR)
library(amt)
#telemetry.mcp<-telemetry.mcp %>% group_by(id_season) %>% mutate (n=n()) %>% filter(n>=3) #Maybe Not Necessary????
#isolate relevant rows
telemetry.mcp<-as.data.frame(RBNERR_p)
telemetry.mcp <- telemetry.mcp[, c("Snake_ID", "UTM_E", "UTM_N","Date","Time")]
# Define long/lat columns
coordinates(telemetry.mcp) <- c("UTM_E", "UTM_N")
# Set the coordinate reference system (CRS)
proj4string(telemetry.mcp) <- CRS("+init=epsg:26917")
# Project data to utms
telemetry.mcp <- spTransform(telemetry.mcp,
CRS("+proj=utm +zone=17 +datum=NAD83 +units=m +no_defs"))
#convert to df
telemetry.mcp<-data.frame(telemetry.mcp)
telemetry.mcp<-ungroup(telemetry.mcp)
telemetry.mcp$Snake_ID<-"01"
telemetry.mcp<-telemetry.mcp %>%
mutate(ts = as.POSIXct(paste(Date, Time, sep = " ")))
track_data<-make_track(telemetry.mcp, coords.x1, coords.x2, ts,
crs = "+init=epsg:26917")
hr_mcp_result <- hr_mcp(track_data, level = 1)
hr_area<-hr_mcp_result[[1]][[3]]* 0.0000003861 #convert to sq mi
hr_area
sf_object <- st_as_sf(hr_mcp_result$mcp, coords = c("x_", "y_"))
crs(sf_object)
sf_object<-sf_object %>% st_transform(crs = 4269)
base +
geom_sf(data = sf_object, fill = "lightblue", color = "black",alpha=.5,inherit.aes=FALSE,show.legend = FALSE) +
geom_sf(data = RBNERR_p, aes(fill=Snake_ID), show.legend = FALSE, size=2,  inherit.aes = FALSE)
ggsave(filename="total.mcp.png",width = 180, height = 180, dpi=300, units = "mm",path= "./images")
git init
